schema {
    query: Query
    mutation: Mutation
}

# QUERY

type Query {
    users: [User!]!
    user(id: ID, email: String): User
}

type User {
    id: ID!
    version: Int!
    firstName: String!
    lastName: String!
    email: String!
    password: String!
    enabled: Boolean!
    deleted: Boolean!

    events: [Event!]!
    roles: [Role!]!
}

type Role {
    id: ID!
    version: Int!
    name: String!

    events: [Event!]!
    authorities: [Authority!]!
    users: [User!]!
}

type Authority {
    id: ID!
    version: Int!
    name: String!

    events: [Event!]!
    roles: [Role!]!
}

type Event {
    id: ID!
    createdBy: User!
    createdAt: String!
    type: EventType!
    description: String!
}

enum EventType {
    USER_CREATED
    USER_UPDATED
    USER_DELETED
    USER_ENABLED
    USER_DISABLED
}

# MUTATION

type Mutation {
    createUser(input: CreateUserInput!): CreateUserOutput!
}

input CreateUserInput {
    firstName: String!
    lastName: String!
    email: String!
    password: String!
    enabled: Boolean!
    deleted: Boolean!
}

type CreateUserOutput {
    user: User
}
