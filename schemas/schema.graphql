schema {
    query: Query
    mutation: Mutation
}

# QUERY

type Query {
    users: [User!]!
    user(id: ID, email: String): User
}

type User {
    id: ID!
    version: Int!
    firstName: String!
    lastName: String!
    email: String!
    password: String!
    enabled: Boolean!
    deleted: Boolean!
    events: [Event!]!
    roles: [Role!]!
}

type Role {
    id: ID!
    version: Int!
    name: String!
    events: [Event!]!
    authorities: [Authority!]!
    users: [User!]!
}

type Authority {
    id: ID!
    version: Int!
    name: String!
    events: [Event!]!
    roles: [Role!]!
}

type Event {
    id: ID!
    createdBy: User!
    createdAt: String!
    type: EventType!
    description: String!
}

enum EventType {
    USER_CREATED
    USER_UPDATED
    USER_DELETED
    USER_RESTORED
    USER_DISABLED
    USER_ENABLED
}

# MUTATION

type Mutation {
    createUser(input: UserInput!): UserOutput!
    updateUser(identity: Identity!, input: UserInput!): UserOutput!
    createRole(input: RoleInput!): RoleOutput!
    updateRole(identity: Identity!, input: RoleInput!): RoleOutput!
    createAuthority(input: AuthorityInput!): AuthorityOutput!
    updateAuthority(identity: Identity!, input: AuthorityInput!): AuthorityOutput!
}

input Identity {
    id: ID!
    version: Int!
}

input UserInput {
    firstName: String!
    lastName: String!
    email: String!
    password: String!
    enabled: Boolean!
    deleted: Boolean!
}

type UserOutput {
    user: User
}

input RoleInput {
    name: String!
}

type RoleOutput {
    role: Role
}

input AuthorityInput {
    name: String!
}

type AuthorityOutput {
    authority: Authority
}
